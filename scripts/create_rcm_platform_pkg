#!/usr/bin/env python

__author__ = "Fabio Giuseppe Di Benedetto"

import os
import os.path
import zipfile
import glob

src_folder = "../src"
cfg_folder = "../cfg"
rcm_platform_master = "master"
rcm_platform_robot = "robot"
rcm_driver = "rcm_driver"
robotics_msgs = "robotics_msgs"
firos = "firos"
rcm_driver_zip_name = "%s.zip" % rcm_driver
robotics_msgs_zip_name = "%s.zip" % robotics_msgs
firos_zip_name = "%s.zip" % firos
firos_folder = "../.."


def create_rcm_platform_pkg(rcm_instance_type, embedded_pkg=False):
    if rcm_instance_type:
        if rcm_instance_type == rcm_platform_master:
            zip_path = "rcm_platform_master.zip"
        elif rcm_instance_type == rcm_platform_robot:
            zip_path = "rcm_platform_robot.zip"
        else:
            raise ValueError("The only valid values for rcm_instance_type are '%s' or '%s'" %
                             (rcm_platform_master, rcm_platform_robot))
        if zip_path:
            if os.path.exists(zip_path):
                os.remove(zip_path)
            zip_file = zipfile.ZipFile(zip_path, "a")
            try:
                m_name = rcm_platform_master
                if rcm_instance_type == rcm_platform_master:
                    m_name = "rcm_platform_%s" % rcm_platform_master
                elif rcm_instance_type == rcm_platform_robot:
                    m_name = "rcm_platform_%s" % rcm_platform_robot
                # all .sh, rcmpd and rcmp_n are put in the zip from the current
                # folder
                for file_path in glob.glob("*.sh"):
                    if rcm_instance_type == rcm_platform_master:
                        if "install_r.sh" in file_path or "sub_inst_r.sh" in file_path:
                            # these files are only for robots and in case of master
                            # we don't need them
                            pass
                        elif "install_m.sh" in file_path or "sub_inst_m.sh" in file_path:
                            # these files are only for master but we want always
                            # the same names
                            new_file_path = file_path.replace("_m.sh", ".sh")
                            zip_file.write(file_path, os.path.join(m_name, new_file_path))
                        else:
                            zip_file.write(file_path, os.path.join(m_name, file_path))
                    elif rcm_instance_type == rcm_platform_robot:
                        if "install_r.sh" in file_path or "sub_inst_r.sh" in file_path:
                            # these files are only for robots
                            new_file_path = file_path.replace("_r.sh", ".sh")
                            zip_file.write(file_path, os.path.join(m_name, new_file_path))
                        elif "install_m.sh" in file_path or "sub_inst_m.sh" in file_path:
                            # these files are only for master and in case of robots
                            # we don't need them
                            pass
                        else:
                            zip_file.write(file_path, os.path.join(m_name, file_path))
                file_list = ["rcmpd", "rcmp_n"]
                for file_path in file_list:
                    zip_file.write(file_path, os.path.join(m_name, file_path))
                file_list = ["LICENSE.txt", "README.md"]
                for file_path in file_list:
                    zip_file.write(os.path.join("..", file_path), os.path.join(m_name, file_path))
                # python module rcm_platform is put in the zip from src
                python_module = "rcm_platform"
                for file_path in glob.glob("%s/*.py" % os.path.join(src_folder, python_module)):
                    # in case of rcm robots we don't need rcmp_ext_connector.py and rcmp_robotics_data.py
                    if not (rcm_instance_type == rcm_platform_robot and
                            ("rcmp_ext_connector.py" in file_path or "rcmp_robotics_data.py" in file_path)):
                        zip_file.write(file_path, os.path.join(m_name, os.path.relpath(file_path, src_folder)))
                # the ros configuration file is put in the zip from cfg
                ros_folder = "ros"
                file_name = "rosconsole.config"
                zip_file.write(os.path.join(cfg_folder, file_name), os.path.join(m_name, ros_folder, file_name))
                if rcm_instance_type == rcm_platform_master and embedded_pkg:
                    # in case of rcm master the parameter embedded_pkg is used to
                    # specify if we put the both the rcm components in the platform
                    # package
                    create_rcm_component_pkg(rcm_driver)
                    create_rcm_component_pkg(robotics_msgs)
                    create_rcm_component_pkg(firos)
                    if os.path.exists(rcm_driver_zip_name):
                        zip_file.write(rcm_driver_zip_name, os.path.join(m_name, rcm_driver_zip_name))
                        os.remove(rcm_driver_zip_name)
                    if os.path.exists(robotics_msgs_zip_name):
                        zip_file.write(robotics_msgs_zip_name, os.path.join(m_name, robotics_msgs_zip_name))
                        os.remove(robotics_msgs_zip_name)
                    if os.path.exists(firos_zip_name):
                        zip_file.write(firos_zip_name, os.path.join(m_name, firos_zip_name))
                        os.remove(firos_zip_name)
            finally:
                zip_file.close()
    else:
        raise TypeError("The parameter rcm_instance_type must be provided")


def create_rcm_component_pkg(rcm_component):
    if rcm_component:
        if rcm_component == rcm_driver:
            zip_path = rcm_driver_zip_name
        elif rcm_component == robotics_msgs:
            zip_path = robotics_msgs_zip_name
        elif rcm_component == firos:
            zip_path = firos_zip_name
        else:
            raise ValueError("The only valid values for rcm_component are '%s' or '%s'" % (rcm_driver, robotics_msgs))
        if zip_path:
            if os.path.exists(zip_path):
                os.remove(zip_path)
            zip_file = zipfile.ZipFile(zip_path, "a")
            try:
                m_name = "rcm"
                if rcm_component == rcm_driver:
                    m_name = "rcm"
                elif rcm_component == robotics_msgs:
                    m_name = robotics_msgs
                elif rcm_component == firos:
                    m_name = firos
                if rcm_component == rcm_driver:
                    for file_path in glob.glob("%s/*.*" % os.path.join(src_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, src_folder))
                    for file_path in glob.glob("%s/*/*.py" % os.path.join(src_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, src_folder))
                elif rcm_component == robotics_msgs:
                    for file_path in glob.glob("%s/*.*" % os.path.join(src_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, src_folder))
                    for file_path in glob.glob("%s/*/*.*" % os.path.join(src_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, src_folder))
                elif rcm_component == firos:
                    for file_path in glob.glob("%s/*.*" % os.path.join(firos_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, firos_folder))
                    for file_path in glob.glob("%s/config/*.*" % os.path.join(firos_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, firos_folder))
                    for file_path in glob.glob("%s/scripts/core.py" % os.path.join(firos_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, firos_folder))
                    for file_path in glob.glob("%s/scripts/mapserver.js" % os.path.join(firos_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, firos_folder))
                    # scripts/include
                    for file_path in glob.glob("%s/scripts/*/*.py" % os.path.join(firos_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, firos_folder))
                    # scripts/include/genpy, scripts/include/pubsub, scripts/include/rcm, scripts/include/ros,
                    # scripts/include/server
                    for file_path in glob.glob("%s/scripts/*/*/*.py" % os.path.join(firos_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, firos_folder))
                    # scripts/include/genpy/msg, scripts/include/pubsub/contextbroker,
                    # scripts/include/ros/dependencies
                    for file_path in glob.glob("%s/scripts/*/*/*/*.py" % os.path.join(firos_folder, m_name)):
                        zip_file.write(file_path, os.path.relpath(file_path, firos_folder))
            finally:
                zip_file.close()
    else:
        raise TypeError("The parameter rcm_component must be provided")

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        if sys.argv[1] == rcm_platform_master:
            create_rcm_platform_pkg(rcm_platform_master)
        elif sys.argv[1] == rcm_platform_robot:
            create_rcm_platform_pkg(rcm_platform_robot)
        elif sys.argv[1] == rcm_driver:
            create_rcm_component_pkg(rcm_driver)
        elif sys.argv[1] == robotics_msgs:
            create_rcm_component_pkg(robotics_msgs)
        elif sys.argv[1] == firos:
            create_rcm_component_pkg(firos)
        else:
            print "Usage:"
            print "%s - create the rcm platform package for rcm %s with embedded packages " \
                  "of rcm driver robotics msgs and firos components" % (__file__, rcm_platform_master)
            print "%s %s - create the rcm platform package for rcm %s" % \
                  (__file__, rcm_platform_master, rcm_platform_master)
            print "%s %s - create the rcm platform package for rcm %s" % \
                  (__file__, rcm_platform_robot, rcm_platform_robot)
            print "%s %s - create the rcm driver package" % (__file__, rcm_driver)
            print "%s %s - create the robotics msgs package" % (__file__, robotics_msgs)
            print "%s %s - create the firos package" % (__file__, firos)
    else:
        create_rcm_platform_pkg(rcm_platform_master, True)
